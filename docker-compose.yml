version: '3.8'

services:
  app:
    build: ./app
    env_file: 
      - .env  # Для секретных переменных
    volumes:
      - ./app:/app
    depends_on:
      - database
      - rabbitmq

  web-proxy:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app

  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # AMQP protocol
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 20s
      timeout: 10s
      retries: 3

  ml_service:
    build: ./mlservice
    ports:
      - "8000:8000"
    volumes:
      - ./mlservice:/app
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - HF_MODEL_NAME=Qwen/Qwen2-VL-2B-Instruct
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
    restart: unless-stopped  
  
  database:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
  
  #docker-compose down -v
  #docker-compose up -d --build