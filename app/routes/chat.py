from fastapi import APIRouter, Depends, Query, Request, WebSocket, WebSocketDisconnect
from auth.jwt_handler import verify_access_token
from services.dependencies import get_current_user
from services.dependencies import get_templates

router = APIRouter(tags=["WebSocket Chat"])
active_connections = []  # –ü–æ–∫–∞ —Ç—É—Ç, –ø–æ—Ç–æ–º ‚Äî –≤ Redis (–∫–∞–∫ –¥–∂–∏–Ω–Ω –≤ –±—É—Ç—ã–ª–∫–µ)


@router.websocket("/ws")
async def websocket_chat(websocket: WebSocket, token: str = Query(...)):
    if not verify_access_token(token):  # –¢–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await websocket.close(code=1008)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        return
    await websocket.accept()
    active_connections.append(websocket)

    try:
        while True:
            user_message = await websocket.receive_text()
            bot_response = (
                f"–ô–µ—Ç–∏: {user_message.upper()}... " f"–ê –í–û–¢ –ò –ù–ï–¢! *—Ä–æ–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä* üòà"
            )
            await websocket.send_text(bot_response)

    except WebSocketDisconnect:
        active_connections.remove(websocket)
        print("–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–∞—Ä–∏–ª—Å—è, –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤–Ω–µ —Å–∫–æ—É–ø–∞.")


@router.get("/chat", name="chat")
async def private_chat(
    request: Request,
    user: str = Depends(get_current_user),
    templates=Depends(get_templates),
):
    return templates.TemplateResponse("chat.html", {"request": request, "user": user})
